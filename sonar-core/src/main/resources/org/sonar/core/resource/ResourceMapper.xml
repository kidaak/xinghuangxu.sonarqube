<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.core.resource.ResourceMapper">

  <sql id="resourceColumns">
    p.id,
    p.kee as key,
    p.path as path,
    p.deprecated_kee as deprecatedKey,
    p.name as name,
    p.long_name as longName,
    p.root_id as rootId,
    p.scope as scope,
    p.qualifier as qualifier,
    p.enabled as enabled,
    p.description as description,
    p.language as language,
    p.copy_resource_id as copyResourceId,
    p.person_id as personId,
    p.created_at as createdAt
  </sql>

  <sql id="componentColumns">
    p.id,
    p.kee as kee,
    p.name as name,
    p.long_name as longName,
    p.qualifier as qualifier,
    s.root_project_id as projectId,
    p.root_id as subProjectId,
    p.path as path
  </sql>

  <resultMap id="snapshotResultMap" type="Snapshot">
    <id property="id" column="id"/>
    <result property="parentId" column="parent_snapshot_id"/>
    <result property="rootId" column="root_snapshot_id"/>
    <result property="date" column="created_at"/>
    <result property="buildDate" column="build_date"/>
    <result property="resourceId" column="project_id"/>
    <result property="status" column="status"/>
    <result property="purgeStatus" column="purge_status"/>
    <result property="last" column="islast"/>
    <result property="scope" column="scope"/>
    <result property="qualifier" column="qualifier"/>
    <result property="version" column="version"/>
    <result property="path" column="path"/>
    <result property="depth" column="depth"/>
    <result property="rootProjectId" column="root_project_id"/>
    <result property="period1Mode" column="period1_mode"/>
    <result property="period2Mode" column="period2_mode"/>
    <result property="period3Mode" column="period3_mode"/>
    <result property="period4Mode" column="period4_mode"/>
    <result property="period5Mode" column="period5_mode"/>
    <result property="period1Param" column="period1_param"/>
    <result property="period2Param" column="period2_param"/>
    <result property="period3Param" column="period3_param"/>
    <result property="period4Param" column="period4_param"/>
    <result property="period5Param" column="period5_param"/>
    <result property="period1Date" column="period1_date"/>
    <result property="period2Date" column="period2_date"/>
    <result property="period3Date" column="period3_date"/>
    <result property="period4Date" column="period4_date"/>
    <result property="period5Date" column="period5_date"/>
  </resultMap>

  <resultMap id="resourceResultMap" type="Resource">
    <id property="id" column="id"/>
    <result property="key" column="kee"/>
    <result property="deprecatedKey" column="deprecated_kee"/>
    <result property="path" column="path"/>
    <result property="name" column="name"/>
    <result property="longName" column="long_name"/>
    <result property="rootId" column="root_id"/>
    <result property="scope" column="scope"/>
    <result property="qualifier" column="qualifier"/>
    <result property="enabled" column="enabled"/>
    <result property="description" column="description"/>
    <result property="language" column="language"/>
    <result property="copyResourceId" column="copy_resource_id"/>
    <result property="personId" column="person_id"/>
    <result property="createdAt" column="created_at"/>
  </resultMap>

  <select id="selectResources" parameterType="map" resultMap="resourceResultMap">
    select * from projects p
    <where>
      <if test="qualifiers != null and qualifiers.length!=0">
        and p.qualifier in
        <foreach item="qualifier" index="index" collection="qualifiers" open="(" separator="," close=")">#{qualifier}</foreach>
      </if>
      <if test="key != null">
        and p.kee=#{key}
      </if>
      <if test="excludeDisabled">
        and p.enabled=${_true}
      </if>
    </where>
  </select>

  <select id="selectResourceIds" parameterType="map" resultType="long">
    select p.id
    from projects p
    <where>
      <if test="qualifiers != null and qualifiers.length!=0">
        and p.qualifier in
        <foreach item="qualifier" index="index" collection="qualifiers" open="(" separator="," close=")">#{qualifier}</foreach>
      </if>
      <if test="key != null">
        and p.kee=#{key}
      </if>
      <if test="excludeDisabled">
        and p.enabled=${_true}
      </if>
    </where>
  </select>

  <select id="selectResource" parameterType="long" resultMap="resourceResultMap">
    select * from projects p
    where p.id=#{id}
  </select>

  <select id="selectSnapshot" parameterType="long" resultMap="snapshotResultMap">
    select * from snapshots where id=#{id}
  </select>

  <select id="selectLastSnapshotByResourceKey" parameterType="string" resultMap="snapshotResultMap">
    SELECT s.* FROM snapshots s
      INNER JOIN projects p on p.id=s.project_id AND p.enabled=${_true} AND p.copy_resource_id IS NULL
    <where>
      AND p.kee=#{id}
      AND s.islast=${_true}
    </where>
  </select>

  <select id="selectLastSnapshotByResourceId" parameterType="string" resultMap="snapshotResultMap">
    SELECT s.* from snapshots s
    <where>
      AND s.project_id=#{id}
      AND s.islast=${_true}
    </where>
  </select>

  <select id="selectDescendantProjects" parameterType="long" resultMap="resourceResultMap">
    select * from projects where scope='PRJ' and root_id=#{id}
  </select>

  <select id="selectRootProjectByComponentKey" parameterType="string" resultMap="resourceResultMap">
    select rootProject.*
    from projects p
    inner join snapshots s on s.project_id=p.id and s.islast=${_true}
    inner join projects rootProject on rootProject.id=s.root_project_id
    <where>
      and p.kee=#{componentKey}
    </where>
  </select>

  <select id="selectRootProjectByComponentId" parameterType="long" resultMap="resourceResultMap" lang="raw">
    select rootProject.*
    from snapshots s
    inner join projects rootProject on rootProject.id=s.root_project_id
    where
      s.project_id=#{componentId}
      and s.islast=${_true}
  </select>

  <select id="selectComponentsByIds" parameterType="long" resultType="Component">
    select <include refid="componentColumns"/>
    from projects p
    inner join snapshots s on s.project_id=p.id and s.islast=${_true}
    <where>
      p.enabled=${_true}
      and p.id in
      <foreach collection="ids" open="(" close=")" item="id" separator=",">
        #{id}
      </foreach>
    </where>
  </select>

  <select id="selectComponentsByIds" parameterType="long" resultType="Component">
    select <include refid="componentColumns"/>
    from projects p
    inner join snapshots s on s.project_id=p.id and s.islast=${_true}
    <where>
      p.enabled=${_true}
      and p.id in
      <foreach collection="ids" open="(" close=")" item="id" separator=",">
        #{id}
      </foreach>
    </where>
  </select>

  <select id="selectProjectsIncludingNotCompletedOnesByQualifiers" parameterType="map" resultMap="resourceResultMap">
    select * from projects p
    <where>
      <if test="qualifiers != null and qualifiers.size() > 0">
        and <foreach item="qualifier" index="index" collection="qualifiers" open="(" separator=" or " close=")">p.qualifier=#{qualifier}
      </foreach>
      </if>
      and p.enabled=${_true}
      and p.copy_resource_id is null
    </where>
  </select>

  <select id="selectProjectsByQualifiers" parameterType="map" resultMap="resourceResultMap">
    <include refid="selectProjectsByQualifiersQuery" />
  </select>

  <sql id="selectProjectsByQualifiersQuery">
    select p.* from projects p
    inner join snapshots s on s.project_id=p.id
    <where>
      <if test="qualifiers != null and qualifiers.size() > 0">
        and <foreach item="qualifier" index="index" collection="qualifiers" open="(" separator=" or " close=")">p.qualifier=#{qualifier}
      </foreach>
      </if>
      and p.enabled=${_true}
      and p.copy_resource_id is null
      and s.islast=${_true}
    </where>
  </sql>

  <select id="selectGhostsProjects" parameterType="map" resultMap="resourceResultMap">
    select distinct p.* from projects p
    inner join snapshots s1 on s1.project_id = p.id and s1.status='U'
    left join snapshots s2 on s2.project_id = p.id and s2.status='P'
    <where>
      and s2.id is null
      <if test="qualifiers != null and qualifiers.size() > 0">
        and <foreach item="qualifier" index="index" collection="qualifiers" open="(" separator=" or " close=")">p.qualifier=#{qualifier}
        </foreach>
      </if>
      and p.copy_resource_id is null
    </where>
  </select>

  <select id="selectProvisionedProjects" parameterType="map" resultMap="resourceResultMap">
    select p.* from projects p
    left join snapshots s on s.project_id=p.id
    <where>
      and s.id is null
      <if test="qualifiers != null and qualifiers.size() > 0">
        and <foreach item="qualifier" index="index" collection="qualifiers" open="(" separator=" or " close=")">p.qualifier=#{qualifier}
        </foreach>
      </if>
      and p.copy_resource_id is null
    </where>
  </select>

  <select id="selectProvisionedProject" parameterType="string" resultMap="resourceResultMap" lang="raw">
    select p.* from projects p
    left join snapshots s on s.project_id=p.id
    where s.id is null
      and p.kee = #{key}
      and p.copy_resource_id is null
  </select>

  <select id="selectAuthorizedChildrenComponentIds" parameterType="map" resultType="int">
    <include refid="selectAuthorizedChildrenComponentIdsQuery" />
  </select>

  <sql id="selectAuthorizedChildrenComponentIdsQuery">
    select s.project_id
    from snapshots s, (
      select project_components.id as id,
        snapshot_components.id as sid,
        root_snapshot_components.project_id as root_project_id,
        root_snapshot_components.id as root_snapshot_id,
        snapshot_components.path as path
      from projects project_components
      inner join snapshots snapshot_components on snapshot_components.project_id = project_components.id and snapshot_components.islast = ${_true}
      inner join snapshots root_snapshot_components on root_snapshot_components.project_id = snapshot_components.root_project_id and root_snapshot_components.islast = ${_true}
      inner join (
        <include refid="org.sonar.core.user.AuthorizationMapper.selectAuthorizedRootProjectIdsQuery" />
      ) authorized_projects on authorized_projects.root_project_id = root_snapshot_components.project_id
      <where>
        and <foreach item="componentRootKey" index="index" collection="componentRootKeys" open="(" separator=" or " close=")"> project_components.kee=#{componentRootKey}</foreach>
        and project_components.enabled = ${_true}
      </where>
    ) authorized_input_components
    <where>
      and s.root_project_id = authorized_input_components.root_project_id
      and s.islast = ${_true}
      and (
        (s.root_snapshot_id = authorized_input_components.root_snapshot_id
          and
          <choose>
            <when test="_databaseId == 'mssql'">
              s.path LIKE authorized_input_components.path + CAST(authorized_input_components.sid AS varchar(15)) + '.%'
            </when>
            <when test="_databaseId == 'mysql'">
              s.path LIKE concat(authorized_input_components.path, authorized_input_components.sid, '.%')
            </when>
            <otherwise>
              s.path LIKE authorized_input_components.path || authorized_input_components.sid || '.%'
            </otherwise>
          </choose>
        )
        or (s.id = authorized_input_components.sid)
      )
    </where>
  </sql>

  <insert id="insert" parameterType="Resource" keyColumn="id" useGeneratedKeys="true" keyProperty="id" lang="raw">
    insert into projects
    (name, long_name, description, scope, qualifier, kee, deprecated_kee, path, language, root_id, copy_resource_id, person_id, enabled, created_at)
    values (
    #{name}, #{longName}, #{description}, #{scope}, #{qualifier},
    #{key}, #{deprecatedKey}, #{path}, #{language}, #{rootId}, #{copyResourceId},
    #{personId}, #{enabled}, #{createdAt}
    )
  </insert>

  <update id="update" parameterType="Resource" lang="raw">
    update projects set name=#{name}, long_name=#{longName}, description=#{description},
    scope=#{scope}, qualifier=#{qualifier}, kee=#{key}, deprecated_kee=#{deprecatedKey}, path=#{path},
    language=#{language}, root_id=#{rootId}, copy_resource_id=#{copyResourceId},
    person_id=#{personId}, enabled=#{enabled} where id=#{id}
  </update>
</mapper>

